C51 COMPILER V9.60.0.0   OLED_METHOD                                                       03/09/2020 18:42:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED_METHOD
OBJECT MODULE PLACED IN .\Objects\OLED_Method.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE OLED_Method.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\OLED_Method.lst) TABS(2) OBJECT(.\Objects\OLED_Method.obj)

line level    source

   1          #include "MCU_Config.h"
   2          
   3          
   4          
   5          /************************************************************************************
   6          *
   7          * 2. void IIC_Start() -- ¿ªÆôI2C×ÜÏß
   8          * 3. void IIC_Stop() -- ¹Ø±ÕI2C×ÜÏß
   9          * 4. void Write_IIC_Byte(u8 IIC_Byte) -- Í¨¹ýI2C×ÜÏßÐ´Ò»¸öbyteµÄÊý¾Ý
  10          * 5. void OLED_WrDat(u8 dat) -- ÏòOLEDÆÁÐ´Êý¾Ý
  11          * 6. void OLED_WrCmd(u8 cmd) -- ÏòOLEDÆÁÐ´ÃüÁî
  12          * 7. void OLED_Set_Pos(u8 x, u8 y) -- ÉèÖÃÏÔÊ¾×ø±ê
  13          * 8. void OLED_Fill(u8 bmp_dat) -- È«ÆÁÏÔÊ¾(ÏÔÊ¾BMPÍ¼Æ¬Ê±²Å»áÓÃµ½´Ë¹¦ÄÜ)
  14          * 9. void OLED_CLS(void) -- ¸´Î»/ÇåÆÁ
  15          * 10. void OLED_Init(void) -- OLEDÆÁ³õÊ¼»¯³ÌÐò£¬´Ëº¯ÊýÓ¦ÔÚ²Ù×÷ÆÁÄ»Ö®Ç°×îÏÈµ÷ÓÃ
  16          * 11. void OLED_P6x8Str(u8 x, y,u8 ch[]) -- 6x8µãÕû£¬ÓÃÓÚÏÔÊ¾ASCIIÂëµÄ×îÐ¡ÕóÁÐ£¬²»Ì«ÇåÎú
  17          * 12. void OLED_P8x16Str(u8 x, y,u8 ch[]) -- 8x16µãÕû£¬ÓÃÓÚÏÔÊ¾ASCIIÂë£¬·Ç³£ÇåÎú
  18          * 13. void OLED_P16x16Ch(u8 x, y, N) -- 16x16µãÕû£¬ÓÃÓÚÏÔÊ¾ºº×ÖµÄ×îÐ¡ÕóÁÐ£¬¿ÉÉèÖÃ¸÷ÖÖ×ÖÌå¡¢¼Ó´Ö¡¢ÇãÐ±¡¢ÏÂ»
             -®ÏßµÈ
  19          * 14. void Draw_BMP(u8 x0, y0,x1, y1,u8 BMP[]) -- ½«128x64ÏñËØµÄBMPÎ»Í¼ÔÚÈ¡×ÖÈí¼þÖÐËã³ö×Ö±í£¬È»ºó¸´ÖÆµ½cod
             -etabÖÐ£¬´Ëº¯Êýµ÷ÓÃ¼´¿É
  20          *
  21          *************************************************************************************/
  22          
  23          /**********************************************
  24          //IIC Start
  25          **********************************************/
  26          void IIC_Start()
  27          {
  28   1         SCL = Hight_Voltage;   
  29   1         SDA = Hight_Voltage;
  30   1         SDA = Low_Voltage;
  31   1         SCL = Low_Voltage;
  32   1      }
  33          
  34          /**********************************************
  35          //IIC Stop
  36          **********************************************/
  37          void IIC_Stop()
  38          {
  39   1         SCL = Low_Voltage;
  40   1         SDA = Low_Voltage;
  41   1         SCL = Hight_Voltage;
  42   1         SDA = Hight_Voltage;
  43   1      }
  44          
  45          /**********************************************
  46          // Í¨¹ýI2C×ÜÏßÐ´Ò»¸ö×Ö½Ú
  47          **********************************************/
  48          void Write_IIC_Byte(u8 IIC_Byte)
  49          {
  50   1        u8 i;
  51   1        for(i=0;i<8;i++)
  52   1        {
C51 COMPILER V9.60.0.0   OLED_METHOD                                                       03/09/2020 18:42:00 PAGE 2   

  53   2          if(IIC_Byte & 0x80)
  54   2            SDA=Hight_Voltage;
  55   2          else
  56   2            SDA=Low_Voltage;
  57   2          SCL=Hight_Voltage;
  58   2          SCL=Low_Voltage;
  59   2          IIC_Byte<<=1;
  60   2        }
  61   1        SDA=1;
  62   1        SCL=1;
  63   1        SCL=0;
  64   1      }
  65          
  66          /*********************OLEDÐ´Êý¾Ý************************************/ 
  67          void OLED_WrDat(u8 IIC_Data)
  68          {
  69   1        IIC_Start();
  70   1        Write_IIC_Byte(0x78);
  71   1        Write_IIC_Byte(0x40);     //write data
  72   1        Write_IIC_Byte(IIC_Data);
  73   1        IIC_Stop();
  74   1      }
  75          /*********************OLEDÐ´ÃüÁî************************************/
  76          void OLED_WrCmd(u8 IIC_Command)
  77          {
  78   1        IIC_Start();
  79   1        Write_IIC_Byte(0x78);            //Slave address,SA0=0
  80   1        Write_IIC_Byte(0x00);     //write command
  81   1        Write_IIC_Byte(IIC_Command);
  82   1        IIC_Stop();
  83   1      }
  84          /*********************OLED ÉèÖÃ×ø±ê************************************/
  85          void OLED_Set_Pos(u8 x, u8 y) 
  86          { 
  87   1        OLED_WrCmd(0xb0+y);
  88   1        OLED_WrCmd(((x&0xf0)>>4)|0x10);
  89   1        OLED_WrCmd((x&0x0f)|0x01);
  90   1      } 
  91          /*********************OLEDÈ«ÆÁ************************************/
  92          void OLED_Fill(u8 bmp_dat) 
  93          {
  94   1        u8 y,x;
  95   1        for(y=0;y<8;y++)
  96   1        {
  97   2          OLED_WrCmd(0xb0+y);
  98   2          OLED_WrCmd(0x01);
  99   2          OLED_WrCmd(0x10);
 100   2          for(x=0;x<X_WIDTH;x++)
 101   2          OLED_WrDat(bmp_dat);
 102   2        }
 103   1      }
 104          /*********************OLED¸´Î»************************************/
 105          void OLED_CLS(void)
 106          {
 107   1        u8 y,x;
 108   1        for(y=0;y<8;y++)
 109   1        {
 110   2          OLED_WrCmd(0xb0+y);
 111   2          OLED_WrCmd(0x01);
 112   2          OLED_WrCmd(0x10);
 113   2          for(x=0;x<X_WIDTH;x++)
 114   2          OLED_WrDat(0);
C51 COMPILER V9.60.0.0   OLED_METHOD                                                       03/09/2020 18:42:00 PAGE 3   

 115   2        }
 116   1      }
 117          /*********************OLED³õÊ¼»¯************************************/
 118          void OLED_Init(void)
 119          {
 120   1        Delay_ms(500);//³õÊ¼»¯Ö®Ç°µÄÑÓÊ±ºÜÖØÒª£¡
 121   1        OLED_WrCmd(0xae);//--turn off oled panel
 122   1        OLED_WrCmd(0x00);//---set Low_Voltage column address
 123   1        OLED_WrCmd(0x10);//---set Hight_Voltage column address
 124   1        OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 125   1        OLED_WrCmd(0x81);//--set contrast control register
 126   1        OLED_WrCmd(Brightness); // Set SEG Output Current Brightness
 127   1        OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0×óÓÒ·´ÖÃ 0xa1Õý³£
 128   1        OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0ÉÏÏÂ·´ÖÃ 0xc8Õý³£
 129   1        OLED_WrCmd(0xa6);//--set normal display
 130   1        OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
 131   1        OLED_WrCmd(0x3f);//--1/64 duty
 132   1        OLED_WrCmd(0xd3);//-set display offset  Shift Mapping RAM Counter (0x00~0x3F)
 133   1        OLED_WrCmd(0x00);//-not offset
 134   1        OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
 135   1        OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 136   1        OLED_WrCmd(0xd9);//--set pre-charge period
 137   1        OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 138   1        OLED_WrCmd(0xda);//--set com pins hardware configuration
 139   1        OLED_WrCmd(0x12);
 140   1        OLED_WrCmd(0xdb);//--set vcomh
 141   1        OLED_WrCmd(0x40);//Set VCOM Deselect Level
 142   1        OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 143   1        OLED_WrCmd(0x02);//
 144   1        OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
 145   1        OLED_WrCmd(0x14);//--set(0x10) disable
 146   1        OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
 147   1        OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
 148   1        OLED_WrCmd(0xaf);//--turn on oled panel
 149   1        OLED_Fill(0x00); //³õÊ¼ÇåÆÁ
 150   1        OLED_Set_Pos(0,0);
 151   1      } 
 152          /***************¹¦ÄÜÃèÊö£ºÏÔÊ¾6*8Ò»×é±ê×¼ASCII×Ö·û´®  ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬ch[]ÎªÐèÒªÊä³öµÄ×Ö·û´®************
             -****/
 153          //×¢Òâ£ºÈç¹ûCodeÖÐµÄ×Ö·ûÓëASCII²»Ò»ÖÂ£¬Ôò»á³öÏÖ´íÎóÏÔÊ¾
 154          void OLED_P6x8Str(u8 x, y,u8 ch[])
 155          {
 156   1        u8 c=0,i=0,j=0;
 157   1        while (ch[j]!='\0')
 158   1        {
 159   2          c =ch[j]-32;
 160   2          if(x>126){x=0;y++;}
 161   2          OLED_Set_Pos(x,y);
 162   2          for(i=0;i<6;i++)
 163   2          OLED_WrDat(F6x8[c][i]);
 164   2          x+=6;
 165   2          j++;
 166   2        }
 167   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    539    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.0.0   OLED_METHOD                                                       03/09/2020 18:42:00 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
