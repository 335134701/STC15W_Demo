C51 COMPILER V9.60.0.0   MCU_GPIO                                                          12/14/2020 21:29:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_GPIO
OBJECT MODULE PLACED IN .\Objects\MCU_GPIO.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_GPIO.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\MCU_GPIO.lst) TABS(2) OBJECT(.\Objects\MCU_GPIO.obj)

line level    source

   1          #include "MCU_GPIO.h"
   2          
   3          //========================================================================
   4          // 函数: void GPIO_Init(void)
   5          // 描述: GPIO口初始化函数
   6          // 参数: 无
   7          // 返回: 无
   8          // 版本: V1.0, 2020.03.09
   9          //========================================================================
  10          //注意:   STC15W4K32S4系列的芯片,上电后所有与PWM相关的IO口均为
  11          //        高阻态,需将这些口设置为准双向口或强推挽模式方可正常使用
  12          void GPIO_Init(void)
  13          {
  14   1          //第一种方式：使用P0n_standard()函数将所有IO口设置为准双向口，默认选择第一种
  15   1          P0n_standard(0xff); //设置为准双向口
  16   1          P1n_standard(0xff); //设置为准双向口
  17   1          P2n_standard(0xff); //设置为准双向口
  18   1          P3n_standard(0xff); //设置为准双向口
  19   1          P4n_standard(0xff); //设置为准双向口
  20   1          P5n_standard(0xff); //设置为准双向口
  21   1      }
  22          /*
  23          //========================================================================
  24          // 函数: void GPIO_Config(void)
  25          // 描述: GPIO口设置工作模式
  26          // 参数: 无
  27          // 返回: 无
  28          // 版本: V1.0, 2020.03.09
  29          //========================================================================
  30          void  GPIO_Config(void)
  31          {
  32            //本方法例程是设置P3^4,P3^5引脚工作模式为GPIO_OUT_PP(推挽输出)
  33            GPIO_InitTypeDef  GPIO_InitStructure;               //结构定义
  34            GPIO_InitStructure.Pin  = GPIO_Pin_4 | GPIO_Pin_5;  //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  35            GPIO_InitStructure.Mode = GPIO_OUT_PP;              //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,
             -GPIO_OUT_PP
  36            GPIO_Set(GPIO_P3,&GPIO_InitStructure);          //初始化
  37          }
  38          //========================================================================
  39          // 函数: unsigned char  GPIO_Inilize(unsigned char GPIO, GPIO_InitTypeDef *GPIOx)
  40          // 描述: 初始化IO口.
  41          // 参数: GPIOx: 结构参数,请参考timer.h里的定义.
  42          // 返回: 成功返回0, 空操作返回1,错误返回2.
  43          // 版本: V1.0, 2020.03.09
  44          //========================================================================
  45          unsigned char GPIO_Set(unsigned char GPIO, GPIO_InitTypeDef *GPIOx)
  46          {
  47            if(GPIO > GPIO_P5)        return 1; //空操作
  48            if(GPIOx->Mode > GPIO_OUT_PP) return 2; //错误
  49            if(GPIO == GPIO_P0)
  50            {
  51              if(GPIOx->Mode == GPIO_PullUp)    P0M1 &= ~GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //上拉准双向口
  52              if(GPIOx->Mode == GPIO_HighZ)   P0M1 |=  GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //浮空输入
  53              if(GPIOx->Mode == GPIO_OUT_OD)    P0M1 |=  GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //开漏输出
C51 COMPILER V9.60.0.0   MCU_GPIO                                                          12/14/2020 21:29:30 PAGE 2   

  54              if(GPIOx->Mode == GPIO_OUT_PP)    P0M1 &= ~GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //推挽输出
  55            }
  56            if(GPIO == GPIO_P1)
  57            {
  58              if(GPIOx->Mode == GPIO_PullUp)    P1M1 &= ~GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //上拉准双向口
  59              if(GPIOx->Mode == GPIO_HighZ)   P1M1 |=  GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //浮空输入
  60              if(GPIOx->Mode == GPIO_OUT_OD)    P1M1 |=  GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //开漏输出
  61              if(GPIOx->Mode == GPIO_OUT_PP)    P1M1 &= ~GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //推挽输出
  62            }
  63            if(GPIO == GPIO_P2)
  64            {
  65              if(GPIOx->Mode == GPIO_PullUp)    P2M1 &= ~GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //上拉准双向口
  66              if(GPIOx->Mode == GPIO_HighZ)   P2M1 |=  GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //浮空输入
  67              if(GPIOx->Mode == GPIO_OUT_OD)    P2M1 |=  GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //开漏输出
  68              if(GPIOx->Mode == GPIO_OUT_PP)    P2M1 &= ~GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //推挽输出
  69            }
  70            if(GPIO == GPIO_P3)
  71            {
  72              if(GPIOx->Mode == GPIO_PullUp)    P3M1 &= ~GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //上拉准双向口
  73              if(GPIOx->Mode == GPIO_HighZ)   P3M1 |=  GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //浮空输入
  74              if(GPIOx->Mode == GPIO_OUT_OD)    P3M1 |=  GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //开漏输出
  75              if(GPIOx->Mode == GPIO_OUT_PP)    P3M1 &= ~GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //推挽输出
  76            }
  77            if(GPIO == GPIO_P4)
  78            {
  79              if(GPIOx->Mode == GPIO_PullUp)    P4M1 &= ~GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //上拉准双向口
  80              if(GPIOx->Mode == GPIO_HighZ)   P4M1 |=  GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //浮空输入
  81              if(GPIOx->Mode == GPIO_OUT_OD)    P4M1 |=  GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //开漏输出
  82              if(GPIOx->Mode == GPIO_OUT_PP)    P4M1 &= ~GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //推挽输出
  83            }
  84            if(GPIO == GPIO_P5)
  85            {
  86              if(GPIOx->Mode == GPIO_PullUp)    P5M1 &= ~GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //上拉准双向口
  87              if(GPIOx->Mode == GPIO_HighZ)   P5M1 |=  GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //浮空输入
  88              if(GPIOx->Mode == GPIO_OUT_OD)    P5M1 |=  GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //开漏输出
  89              if(GPIOx->Mode == GPIO_OUT_PP)    P5M1 &= ~GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //推挽输出
  90            }
  91            return 0; //成功
  92          }
  93          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     37    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
