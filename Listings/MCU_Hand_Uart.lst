C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     08/08/2020 19:38:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_HAND_UART
OBJECT MODULE PLACED IN .\Objects\MCU_Hand_Uart.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_Hand_Uart.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\MCU_Hand_Uart.lst) TABS(2) OBJECT(.\Objects\MCU_Hand_Uart.obj)

line level    source

   1          #include "MCU_Hand_Uart.h"
   2          
   3          //数据包序号
   4          unsigned char Sn=0x00;
   5          
   6          
   7          //========================================================================
   8          // 函数: void UART_Receive_Processing()
   9          // 描述: UART1接收处理函数
  10          // 参数: 无
  11          // 返回: 无
  12          // 版本: V1.0, 2020.04.24
  13          //========================================================================
  14          void UART_Receive_Processing()
  15          {
  16   1      
  17   1        if(Uart_Pretreatment())
  18   1        {
  19   2          //无线模块连接标记位
  20   2          Wifi_flag=0x01;
  21   2          //获取包序号并赋值给Sn
  22   2          Sn=RX1_Buffer[5];
  23   2          switch(RX1_Buffer[4])
  24   2          {
  25   3            //WiFi模组获取设备信息
  26   3            case 0x01:
  27   3              Data_Encapsulation(Device_information,sizeof(Device_information),0x00,Sn,0x00);
  28   3              break;
  29   3            //WiFi模组控制设备,读取设备的当前状态
  30   3            case 0x03:
  31   3              //WiFi模 组 控 制 设 备
  32   3              if(RX1_Buffer[8]==0x01)
  33   3              {
  34   4                //收到数据后，mcu控制设备函数
  35   4                MCU_Application_Control(RX1_Buffer);          
  36   4                Data_Encapsulation(Mcu_send,9,0x04,Sn,0x00);
  37   4                //MCU主动上报当前状态
  38   4                Sn=Sn+0x01;
  39   4                Data_Encapsulation(Mcu_send,14,0x05,Sn,0x04);
  40   4                MCU_OLED_StatusChange(RX1_Buffer[9]);
  41   4              }
  42   3              // WiFi模 组 读 取 设 备 的 当 前 状 态
  43   3              if(RX1_Buffer[8]==0x02){Data_Encapsulation(Mcu_send,14,0x04,Sn,0x03);}
  44   3              break;  
  45   3            //MCU主动上报当前状态WIFI模组回复
  46   3            case 0x06:  
  47   3              break;
  48   3            //WiFi模组向MCU发送心跳
  49   3            case 0x07:
  50   3                //关闭定时器，将计数器置0
  51   3                TR0=0;Timer0_Count=0;
  52   3                Data_Encapsulation(Mcu_send,9,0x08,Sn,0x00);
  53   3                //打开定时器
  54   3                TR0=1;
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     08/08/2020 19:38:26 PAGE 2   

  55   3            break;  
  56   3            //通知WIFI模组进入配置模式后接收WIFI模组回复
  57   3            case 0x0a:
  58   3              //OLED_CLS_Local(0,2,X_WIDTH,Y_WIDTH);
  59   3              //OLED_P6x8Str(2,2,"Enter Wifi Config!");
  60   3              break;
  61   3            //重置WiFi模组后接收WIFI模组回复
  62   3            case 0x0c:
  63   3              //OLED_CLS_Local(0,2,X_WIDTH,Y_WIDTH);
  64   3              //OLED_P6x8Str(2,2,"Wifi Reset Success!");
  65   3              break;
  66   3            //WiFi模组向MCU推送WiFi状态
  67   3            case 0x0d:
  68   3                //将手机连接标志位，网络连接标志位初始化
  69   3                Phone_flag=0;Net_flag=0;
  70   3                //展示WiFi连接信息
  71   3                MCU_OLED_MessageShow(RX1_Buffer[4],RX1_Buffer[8],RX1_Buffer[9]);
  72   3                if(RX1_Buffer[8]>=0x00 && RX1_Buffer[8]<=0x07 ){Net_flag=1;}
  73   3                if(RX1_Buffer[8]>=0x08 && RX1_Buffer[8]<=0x0F ){Net_flag=1;Phone_flag=1;}
  74   3                //展示产品连接信息
  75   3                MCU_OLED_StatusChange(0x00);
  76   3                Data_Encapsulation(Mcu_send,9,0x0e,Sn,0x00);
  77   3              break;
  78   3            case 0x0f:
  79   3              Data_Encapsulation(Mcu_send,9,0x10,Sn,0x00);
  80   3              break;
  81   3            //WiFi模组非法数据包通知
  82   3            case 0x11:
  83   3              Data_Encapsulation(Mcu_send,10,0x12,Sn,RX1_Buffer[8]);
  84   3              break;      
  85   3            //MCU请求WiFi进入可绑定模式，WiFi模组回复 
  86   3            case 0x16:
  87   3              break;    
  88   3            //MCU请求获取网络时间，WiFi模组回复 
  89   3            case 0x18:
  90   3              break;
  91   3            case 0x2a:
  92   3              //MCU请求WiFi重启，WiFi模组回复
  93   3              break;
  94   3            }
  95   2            RST_Uart_Timer();
  96   2        } 
  97   1      }
  98          //========================================================================
  99          // 函数: void UART_Send_Processing()
 100          // 描述: UART1发送处理函数
 101          // 参数: 无
 102          // 返回: 无
 103          // 版本: V1.0, 2020.04.24
 104          //========================================================================
 105          void UART_Send_Processing()
 106          {
 107   1        
 108   1        unsigned char flag=0;
 109   1        //  配置WiFi模式(Soft模式)  **/
 110   1        if(Set_soft_flag==0)      {Delay_ms(10);  if(Set_soft_flag==0)      {flag=0x01;} }
 111   1        //  配置WiFi模式(AP模式)  **/
 112   1        if(Set_AP_flag==0)        {Delay_ms(10);  if(Set_AP_flag==0)        {flag=0x02;} }
 113   1        //  重置WiFi信息  **/
 114   1        if(Reset_message_flag==0) {Delay_ms(10);  if(Reset_message_flag==0) {flag=0x03;} }
 115   1        //  WiFi进入可绑定模式  **/
 116   1        if(Bindable_wifi_flag==0) {Delay_ms(10);  if(Bindable_wifi_flag==0) {flag=0x04;} }
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     08/08/2020 19:38:26 PAGE 3   

 117   1        //   重启WiFi模组   **/
 118   1        if(Restart_wifi_flag==0)  {Delay_ms(10);  if(Restart_wifi_flag==0)  {flag=0x05;} }
 119   1        if(flag!=0&&Wifi_flag==1)
 120   1        {
 121   2          if(flag<=0x05){OLED_CLS_Local(0,2,X_WIDTH,Y_WIDTH);}
 122   2          if(Sn!=0x00){Sn=Sn+0x01;}
 123   2          switch(flag)
 124   2          {
 125   3            //  配置WiFi模式(Soft模式)  **/
 126   3            case 0x01:
 127   3                OLED_P6x8Str(2,2,"Configure Wifi:Soft");
 128   3                Data_Encapsulation(Mcu_send,10,0x09,Sn,0x01);
 129   3              break;
 130   3            //  配置WiFi模式(AP模式)  **/
 131   3            case 0x02:
 132   3                OLED_P6x8Str(2,2,"Configure Wifi:AP");
 133   3                Data_Encapsulation(Mcu_send,10,0x09,Sn,0x02);
 134   3              break;
 135   3            //  重置WiFi信息  **/
 136   3            case 0x03:
 137   3                OLED_P6x8Str(2,2,"Reset Wifi!");
 138   3                Data_Encapsulation(Mcu_send,9,0x0b,Sn,0x00);
 139   3              break;
 140   3            //  WiFi进入可绑定模式  **/
 141   3            case 0x04:
 142   3                OLED_P6x8Str(2,2,"Enter bindable mode!");
 143   3                Data_Encapsulation(Mcu_send,9,0x15,Sn,0x00);
 144   3              break;
 145   3            //   重启WiFi模组   **/
 146   3            case 0x05:
 147   3                OLED_P6x8Str(2,2,"Restart Wifi!");
 148   3                Data_Encapsulation(Mcu_send,9,0x29,Sn,0x00);
 149   3              break;
 150   3          }
 151   2          while(Set_soft_flag==0||Set_AP_flag==0||Reset_message_flag==0||Bindable_wifi_flag==0||Restart_wifi_flag=
             -=0);
 152   2        }
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    972    ----
   CONSTANT SIZE    =     85    ----
   XDATA SIZE       =      1       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
