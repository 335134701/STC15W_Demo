C51 COMPILER V9.60.0.0   MCU_COMMONMETHOD                                                  11/25/2020 20:52:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_COMMONMETHOD
OBJECT MODULE PLACED IN .\Objects\MCU_CommonMethod.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_CommonMethod.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\MCU_CommonMethod.lst) TABS(2) OBJECT(.\Objects\MCU_CommonMethod.obj)

line level    source

   1          #include "MCU_CommonMethod.h"
   2          
   3          //========================================================================
   4          // 函数: void Delay_ms(unsigned int time)
   5          // 描述: 软件延时函数
   6          // 参数: time:延时时间
   7          // 返回: 无
   8          // 说明：单片机频率不同，延时效果不同
   9          // 版本: V1.0, 2020.03.09
  10          //========================================================================
  11          void Delay_ms(unsigned int time)
  12          {
  13   1          unsigned int x, y;
  14   1          for(x = time; x > 0; x--)
  15   1              for(y = 110; y > 0; y--);
  16   1      }
  17          //========================================================================
  18          // 函数: void UART_BUF_Init()
  19          // 描述: 初始化串口接收相关参数或设置
  20          // 参数: 无
  21          // 返回: 无
  22          // 说明：此函数主要初始化串口设置参数
  23          // 版本: V1.0, 2020.03.09
  24          //========================================================================
  25          void UART_BUF_Init()
  26          {
  27   1          RX1_len = 0;
  28   1          memset(RX1_Buffer, 0, sizeof(RX1_Buffer));
  29   1      }
  30          //========================================================================
  31          // 函数: unsigned char Uart_Pretreatment()
  32          // 描述: 数据接收预处理函数
  33          // 参数: 无
  34          // 返回: 无
  35          // 说明：此函数主要处理，接收字符串，并校验字符串
  36          // 版本: V1.0, 2020.03.09
  37          //========================================================================
  38          unsigned char Uart_Pretreatment()
  39          {
  40   1          //Check_protocol_flag表示接收数据是否有效标记位
  41   1          unsigned char Check_protocol_flag = 0;
  42   1          if((RX1_len > 0) && !B_TX1_Busy) {
  43   2              if( RX1_Buffer[0]==0xFF || RX1_Buffer[1]==0xFF )
  44   2              {
  45   3                  if(RX1_len>(MinOrder+5)){UART_BUF_Init();}  
  46   3                  if(RX1_len>=MinOrder){Check_protocol_flag = Check_Protocol(RX1_Buffer, RX1_len);} 
  47   3              }else{
  48   3                  UART_BUF_Init();
  49   3              }
  50   2          }else{
  51   2              UART_BUF_Init();
  52   2          }
  53   1          return Check_protocol_flag;
  54   1      }
C51 COMPILER V9.60.0.0   MCU_COMMONMETHOD                                                  11/25/2020 20:52:46 PAGE 2   

  55          
  56          //========================================================================
  57          // 函数: unsigned char Calculate_Checksum(unsigned char *Buf,unsigned int Buf_len)
  58          // 描述: 计算校验和
  59          // 参数: *Buf:字符数组,Buf_len:数组实际长度
  60          // 返回: 无
  61          // 说明：无
  62          // 版本: V1.0, 2020.03.09
  63          //========================================================================
  64          unsigned char Calculate_Checksum(unsigned char *Buf, unsigned int Buf_len)
  65          {
  66   1          unsigned char checksum = 0x00;
  67   1          unsigned int i = 0, len = Buf_len;
  68   1          for(i = 2; i < (len - 1); i++) {
  69   2              checksum = checksum + Buf[i];
  70   2          }
  71   1          checksum = checksum % 256;
  72   1          return checksum;
  73   1      }
  74          
  75          //========================================================================
  76          // 函数: unsigned char Check_Protocol(unsigned char *Buf,unsigned int Buf_len)
  77          // 描述: 检验校验和是否一致
  78          // 参数: *Buf:字符数组,Buf_len:数组实际长度
  79          // 返回: 无
  80          // 说明：具体思想为：接收到的BUF，取校验和，计算新的校验和，对比是否一致，若不一致，则数据无效
  81          // 版本: V1.0, 2020.03.09
  82          //========================================================================
  83          unsigned char Check_Protocol(unsigned char *Buf, unsigned int Buf_len)
  84          {
  85   1          unsigned char Check_protocol_flag = 0;
  86   1          //将原BUF的校验和提取
  87   1          unsigned char old_checksum = 0xFF;
  88   1          unsigned char new_checksum = 0x00;
  89   1          if(Buf_len>0){old_checksum = Buf[Buf_len - 1];}
  90   1          //计算新的校验和并赋值给new_checksum
  91   1          new_checksum = Calculate_Checksum(Buf, Buf_len);
  92   1          //比较原校验和与新校验和是否一致
  93   1          if(new_checksum == old_checksum) {
  94   2              Check_protocol_flag = 1;
  95   2          }
  96   1          return Check_protocol_flag;
  97   1      }
  98          
  99          //========================================================================
 100          // 函数: void Data_Encapsulation(unsigned char *Buf,unsigned int Buf_len,unsigned char order,sn,action)
 101          // 描述: 根据需要，打包数据并发送
 102          // 参数: *Buf:字符数组,Buf_len:数组实际长度
 103          // 返回: 无
 104          // 说明：无
 105          // 版本: V1.0, 2020.03.09
 106          //========================================================================
 107          void Data_Encapsulation(unsigned char *Buf, unsigned int Buf_len, unsigned char order, sn, action)
 108          {
 109   1          //判断是否询问产品信息
 110   1          if(Buf_len != sizeof(Device_information)) {
 111   2              switch(Buf_len) {
 112   3              case 9:
 113   3                  Buf[3] = 0x05;
 114   3                  break;
 115   3              case 10:
 116   3                  Buf[3] = 0x06;
C51 COMPILER V9.60.0.0   MCU_COMMONMETHOD                                                  11/25/2020 20:52:46 PAGE 3   

 117   3                  break;
 118   3              case 11:
 119   3                  Buf[3] = 0x07;
 120   3                  break;
 121   3              case 12:
 122   3                  Buf[3] = 0x08;
 123   3                  break;
 124   3              case 14:
 125   3                  Buf[3] = 0x0A;
 126   3                  Buf[9] = (P1 >> 4 & 0X0F);
 127   3                  Buf[10] = 1;
 128   3                  Buf[11] = 0x00;
 129   3                  Buf[12] = 0x00;
 130   3                  break;
 131   3              }
 132   2              Buf[4] = order;
 133   2              Buf[5] = sn;
 134   2              if(Buf_len != 9) {
 135   3                  Buf[8] = action;
 136   3              }
 137   2          }
 138   1          //计算校验和
 139   1          Buf[Buf_len - 1] = Calculate_Checksum(Buf, Buf_len);
 140   1          //串口1回复数据
 141   1          SendString1(Buf, Buf_len);
 142   1          //串口2转发发送数据
 143   1          Printf(1, Buf, Buf_len);
 144   1      }
 145          //========================================================================
 146          // 函数: void IsConnect_wifi()
 147          // 描述: 判断是否接收到心跳包，如果没有接收到表示，连接wifi失败
 148          // 参数: *Buf:字符数组,Buf_len:数组实际长度
 149          // 返回: 无
 150          // 说明：无
 151          // 版本: V1.0, 2020.03.09
 152          //========================================================================
 153          void IsConnect_wifi()
 154          {
 155   1          if((Wifi_flag == 1) && (Timer0_Count == 0)) {
 156   2              TR0 = 1;
 157   2          }
 158   1          //超过一分钟还未收到心跳包，即单片机与wifi模块失去联系
 159   1          if(Timer0_Count >= 12000) {
 160   2              TR0 = 0;
 161   2              Timer0_Count = 0;
 162   2              Wifi_flag = 0x00;
 163   2              Net_flag = 0;
 164   2              Phone_flag = 0;
 165   2              OLED_CLS_Local(0, 2, X_WIDTH, Y_WIDTH);
 166   2              OLED_P6x8Str(36, 4, "Wifi loss!");
 167   2          }
 168   1      }
 169          //========================================================================
 170          // 函数: void Printf(unsigned char flag,unsigned char *Buf,unsigned int len)
 171          // 描述: UART2输出
 172          // 参数: *Buf:字符数组,Buf_len:数组实际长度
 173          // 返回: 无
 174          // 说明：无
 175          // 版本: V1.0, 2020.03.09
 176          //========================================================================
 177          void Printf(unsigned char flag, unsigned char *Buf, unsigned int len)
 178          {
C51 COMPILER V9.60.0.0   MCU_COMMONMETHOD                                                  11/25/2020 20:52:46 PAGE 4   

 179   1          unsigned char Buf_HEX[RX1_Length] = {0};
 180   1          switch(flag) {
 181   2          case 0:
 182   2              SendString2("RX:", 3);
 183   2              break;
 184   2          case 1:
 185   2              SendString2("TX:", 3);
 186   2              break;
 187   2          }
 188   1          HexToAscii(Buf_HEX, Buf, len);
 189   1          SendString2(Buf_HEX, (len * 3 - 1));
 190   1          SendString2("\r\n", 2);
 191   1      }
 192          //========================================================================
 193          // 函数: void HexToAscii(unsigned char *Buf_Dest,unsigned char *Buf_Src,unsigned int Buf_len)
 194          // 描述: Hex转Ascii
 195          // 参数: Buf_Dest:目标字符集,Buf_Src:原字符集,Buf_len:原字符集实际长度;
 196          // 返回: 无
 197          // 说明：无
 198          // 版本: V1.0, 2020.03.09
 199          //========================================================================
 200          void HexToAscii(unsigned char *Buf_Dest, unsigned char *Buf_Src, unsigned int Buf_len)
 201          {
 202   1          unsigned char Nibble[3] = {0};
 203   1          unsigned char Buffer[RX1_Length] = {0};
 204   1          int i = 0, j = 0;
 205   1          for(i = 0; i < Buf_len; i++) {
 206   2      
 207   2              Nibble[0] = Buf_Src[i] >> 4 & 0X0F;
 208   2              Nibble[1] = Buf_Src[i] & 0x0F;
 209   2              for(j = 0; j < sizeof(Nibble) - 1; j++) {
 210   3                  if((Nibble[j] >= 0x00) && (Nibble[j] < 0x0A)) {
 211   4                      Nibble[j] = Nibble[j] + '0';
 212   4                  } else if((Nibble[j] >= 0x0A) && (Nibble[j] <= 0x0F)) {
 213   4                      Nibble[j] = Nibble[j] - 10 + 'A';
 214   4                  } else {
 215   4                      return;
 216   4                  }
 217   3              }
 218   2              if(i < (Buf_len - 1)) {
 219   3                  Nibble[2] = ' ';
 220   3              } else {
 221   3                  Nibble[2] = '\0';
 222   3              }
 223   2              memcpy(Buffer + i * sizeof(Nibble), Nibble, sizeof(Nibble));
 224   2          }
 225   1          memcpy(Buf_Dest, Buffer, sizeof(Nibble)*Buf_len);
 226   1          return ;
 227   1      }
 228          /*
 229          //========================================================================
 230          // 函数: void IntToHEX(unsigned char* str,int number)
 231          // 描述: 十进制转十六进制
 232          // 参数: str:目标字符集,number:十进制数字
 233          // 返回: 无
 234          // 说明：无
 235          // 版本: V1.0, 2020.03.09
 236          //========================================================================
 237          void IntToHEX(unsigned char* str,int number)
 238          {
 239              unsigned char i=0,j=0,CLen=0,index=0,RLen=0,TRlen=0;
 240              unsigned char tmp[16]={0};
C51 COMPILER V9.60.0.0   MCU_COMMONMETHOD                                                  11/25/2020 20:52:46 PAGE 5   

 241              if(number==0){ str[0]=0x00;return;}
 242              while (number!=0)
 243              {
 244                  i = number%2;
 245                  number /= 2;
 246                  tmp[index++] = i+48;
 247              }
 248              RLen=strlen(tmp);
 249              if(RLen%8==0){CLen=RLen/8;}else{CLen=RLen/8+1;}
 250              for(i=0;i<CLen;i++)
 251              {
 252                  if(i==(CLen-1)){TRlen=RLen%8;}
 253                  else{TRlen=8;}
 254                  index=i*8;
 255                  for(j=0;j<TRlen;j++){
 256                      str[i]= ((tmp[index*i+j]-0x30) << j | str[i]);
 257                  }
 258              }
 259          }
 260          
 261          //========================================================================
 262          // 函数: void AsciiToHex(unsigned char *Buf_Dest,unsigned char *Buf_Src,unsigned int Buf_len)
 263          // 描述: ASCII转HEX
 264          // 参数: Buf_Dest:目标字符集,Buf_Src:原字符集,Buf_len:原字符集实际长度;
 265          // 返回: 无
 266          // 说明：无
 267          // 版本: V1.0, 2020.03.09
 268          //========================================================================
 269          void AsciiToHex(unsigned char *Buf_Dest,unsigned char *Buf_Src,unsigned int Buf_len)
 270          {
 271            unsigned int nHexLen = (Buf_len+1) / 3;
 272            unsigned char Nibble[3] = {0};
 273            unsigned int i = 0,j=0;
 274            if ((Buf_len+1)%3){return;}
 275            for (i = 0; i < nHexLen; i ++)
 276            {
 277              Nibble[0] = *Buf_Src ++;
 278              Nibble[1] = *Buf_Src ++;
 279              if(i!=(nHexLen-1)){Nibble[2] = *Buf_Src ++;}
 280              for (j = 0; j < (sizeof(Nibble)-1); j ++)
 281              {
 282                if (Nibble[j] <= 'F' && Nibble[j] >= 'A')
 283                  Nibble[j] = Nibble[j] - 'A' + 10;
 284                else if (Nibble[j] <= 'f' && Nibble[j] >= 'a')
 285                  Nibble[j] = Nibble[j] - 'a' + 10;
 286                else if (Nibble[j] >= '0' && Nibble[j] <= '9')
 287                  Nibble [j] = Nibble[j] - '0';
 288                else
 289                  return ;//Nibble[j] = Nibble[j] - 'a' + 10;
 290          
 291              } // for (int j = ...)
 292              Buf_Dest[i] = Nibble[0] << 4; // Set the high nibble
 293              Buf_Dest[i] |= Nibble[1]; //Set the low nibble
 294            } // for (int i = ...)
 295            return;
 296          }
 297          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1352    ----
   CONSTANT SIZE    =    537    ----
C51 COMPILER V9.60.0.0   MCU_COMMONMETHOD                                                  11/25/2020 20:52:46 PAGE 6   

   XDATA SIZE       =   ----     556
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
