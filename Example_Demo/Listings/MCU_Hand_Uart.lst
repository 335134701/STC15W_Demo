C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/26/2020 21:16:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_HAND_UART
OBJECT MODULE PLACED IN .\Objects\MCU_Hand_Uart.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_Hand_Uart.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\MCU_Hand_Uart.lst) TABS(2) OBJECT(.\Objects\MCU_Hand_Uart.obj)

line level    source

   1          #include "MCU_Hand_Uart.h"
   2          
   3          //数据包序号
   4          unsigned char Sn = 0x00;
   5          
   6          
   7          //========================================================================
   8          // 函数: void UART_Receive_Processing()
   9          // 描述: UART1接收处理函数
  10          // 参数: 无
  11          // 返回: 无
  12          // 版本: V1.0, 2020.04.24
  13          //========================================================================
  14          void UART_Receive_Processing()
  15          {
  16   1          //校验接收数据的合法性
  17   1          if(Uart_Pretreatment()) {
  18   2              //无线模块连接标记位
  19   2              Wifi_flag = 0x01;
  20   2              //获取包序号并赋值给Sn
  21   2              Sn = RX1_Buffer[5];
  22   2              switch(RX1_Buffer[4]) {
  23   3              //WiFi模组获取设备信息
  24   3              case 0x01:
  25   3                  //Data_Encapsulation(Device_information, sizeof(Device_information), 0x00, Sn, 0x00);
  26   3                  break;
  27   3              //WiFi模组控制设备,读取设备的当前状态
  28   3              case 0x03:
  29   3                  //WiFi模 组 控 制 设 备
  30   3                  if(RX1_Buffer[8] == 0x01) {
  31   4                      //收到数据后，mcu控制设备函数
  32   4      //                MCU_Application_Control(RX1_Buffer);
  33   4                      Data_Encapsulation(9, 0x04, Sn, 0x00);
  34   4                      //MCU主动上报当前状态
  35   4                      Sn = Sn + 0x01;
  36   4                      Data_Encapsulation(14, 0x05, Sn, 0x04);
  37   4                      MCU_OLED_StatusChange(RX1_Buffer[9]);
  38   4                  }
  39   3                  // WiFi模 组 读 取 设 备 的 当 前 状 态
  40   3                  if(RX1_Buffer[8] == 0x02) {
  41   4                      Data_Encapsulation(14, 0x04, Sn, 0x03);
  42   4                  }
  43   3                  break;
  44   3              //MCU主动上报当前状态WIFI模组回复
  45   3              case 0x06:
  46   3                  break;
  47   3              //WiFi模组向MCU发送心跳
  48   3              case 0x07:
  49   3                  //关闭定时器，将计数器置0
  50   3                  TR0 = 0;Timer0_Count = 0;
  51   3                  Data_Encapsulation(9, 0x08, Sn, 0x00);
  52   3                  //打开定时器
  53   3                  TR0 = 1;
  54   3                  break;
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/26/2020 21:16:06 PAGE 2   

  55   3              //通知WIFI模组进入配置模式后接收WIFI模组回复
  56   3              case 0x0a:
  57   3                  //OLED_CLS_Local(0,2,X_WIDTH,Y_WIDTH);
  58   3                  //OLED_P6x8Str(2,2,"Enter Wifi Config!");
  59   3                  break;
  60   3              //重置WiFi模组后接收WIFI模组回复
  61   3              case 0x0c:
  62   3                  //OLED_CLS_Local(0,2,X_WIDTH,Y_WIDTH);
  63   3                  //OLED_P6x8Str(2,2,"Wifi Reset Success!");
  64   3                  break;
  65   3              //WiFi模组向MCU推送WiFi状态
  66   3              case 0x0d:
  67   3                  //将手机连接标志位，网络连接标志位初始化
  68   3                  Phone_flag = 0;Net_flag = 0;
  69   3                  //展示WiFi连接信息
  70   3                  MCU_OLED_MessageShow(RX1_Buffer[4], RX1_Buffer[8], RX1_Buffer[9]);
  71   3                  if(RX1_Buffer[8] >= 0x00 && RX1_Buffer[8] <= 0x07 ) Net_flag = 1;
  72   3                  if(RX1_Buffer[8] >= 0x08 && RX1_Buffer[8] <= 0x0F ) { Net_flag = 1;Phone_flag = 1;}
  73   3                  //如果有手机连接 展示产品连接信息
  74   3                  if(Phone_flag) MCU_OLED_StatusChange(0x00);
  75   3                  Data_Encapsulation(9, 0x0e, Sn, 0x00);
  76   3                  break;
  77   3              case 0x0f:
  78   3                  Data_Encapsulation(9, 0x10, Sn, 0x00);
  79   3                  break;
  80   3              //WiFi模组非法数据包通知
  81   3              case 0x11:
  82   3                  Data_Encapsulation(10, 0x12, Sn, RX1_Buffer[8]);
  83   3                  break;
  84   3              //MCU请求WiFi进入可绑定模式，WiFi模组回复
  85   3              case 0x16:
  86   3                  break;
  87   3              //MCU请求获取网络时间，WiFi模组回复
  88   3              case 0x18:
  89   3                  break;
  90   3              case 0x2a:
  91   3                  //MCU请求WiFi重启，WiFi模组回复
  92   3                  break;
  93   3              }
  94   2              UART_BUF_Init();
  95   2          }
  96   1      }
  97          //========================================================================
  98          // 函数: void UART_Send_Processing()
  99          // 描述: UART1发送处理函数
 100          // 参数: 无
 101          // 返回: 无
 102          // 版本: V1.0, 2020.04.24
 103          //========================================================================
 104          void UART_Send_Processing()
 105          {
 106   1          unsigned char flag = 0;
 107   1          //  配置WiFi模式(Soft模式)  
 108   1          if(Set_soft_flag == 0)      {
 109   2              Delay_ms(10);
 110   2              if(Set_soft_flag == 0)      {
 111   3                  flag = 0x01;
 112   3              }
 113   2          }
 114   1          //  配置WiFi模式(AP模式)  
 115   1          if(Set_AP_flag == 0)        {
 116   2              Delay_ms(10);
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/26/2020 21:16:06 PAGE 3   

 117   2              if(Set_AP_flag == 0)        {
 118   3                  flag = 0x02;
 119   3              }
 120   2          }
 121   1          //  重置WiFi信息  
 122   1          if(Reset_message_flag == 0) {
 123   2              Delay_ms(10);
 124   2              if(Reset_message_flag == 0) {
 125   3                  flag = 0x03;
 126   3              }
 127   2          }
 128   1          //  WiFi进入可绑定模式 
 129   1          if(Bindable_wifi_flag == 0) {
 130   2              Delay_ms(10);
 131   2              if(Bindable_wifi_flag == 0) {
 132   3                  flag = 0x04;
 133   3              }
 134   2          }
 135   1          //   重启WiFi模组   
 136   1          if(Restart_wifi_flag == 0)  {
 137   2              Delay_ms(10);
 138   2              if(Restart_wifi_flag == 0)  {
 139   3                  flag = 0x05;
 140   3              }
 141   2          }
 142   1          if(flag != 0 && Wifi_flag == 1) {
 143   2              if(flag <= 0x05) {
 144   3                  OLED_CLS_Local(0, 2, X_WIDTH, Y_WIDTH);
 145   3              }
 146   2              if(Sn != 0x00) {
 147   3                  Sn = Sn + 0x01;
 148   3              }
 149   2              switch(flag) {
 150   3              //  配置WiFi模式(Soft模式)  
 151   3              case 0x01:
 152   3                  OLED_P6x8Str(2, 2, "Configure Wifi:Soft");
 153   3                  Data_Encapsulation(10, 0x09, Sn, 0x01);
 154   3                  break;
 155   3              //  配置WiFi模式(AP模式) 
 156   3              case 0x02:
 157   3                  OLED_P6x8Str(2, 2, "Configure Wifi:AP");
 158   3                  Data_Encapsulation(10, 0x09, Sn, 0x02);
 159   3                  break;
 160   3              //  重置WiFi信息 
 161   3              case 0x03:
 162   3                  OLED_P6x8Str(2, 2, "Reset Wifi!");
 163   3                  Data_Encapsulation(9, 0x0b, Sn, 0x00);
 164   3                  break;
 165   3              //  WiFi进入可绑定模式 
 166   3              case 0x04:
 167   3                  OLED_P6x8Str(2, 2, "Enter bindable mode!");
 168   3                  Data_Encapsulation(9, 0x15, Sn, 0x00);
 169   3                  break;
 170   3              //   重启WiFi模组 
 171   3              case 0x05:
 172   3                  OLED_P6x8Str(2, 2, "Restart Wifi!");
 173   3                  Data_Encapsulation(9, 0x29, Sn, 0x00);
 174   3                  break;
 175   3              }
 176   2              while(Set_soft_flag == 0 || Set_AP_flag == 0 || Reset_message_flag == 0 || Bindable_wifi_flag == 0
             - || Restart_wifi_flag == 0);
 177   2          }
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/26/2020 21:16:06 PAGE 4   

 178   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    750    ----
   CONSTANT SIZE    =     85    ----
   XDATA SIZE       =      1       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
