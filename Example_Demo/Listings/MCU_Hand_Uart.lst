C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/25/2020 20:52:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_HAND_UART
OBJECT MODULE PLACED IN .\Objects\MCU_Hand_Uart.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_Hand_Uart.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\MCU_Hand_Uart.lst) TABS(2) OBJECT(.\Objects\MCU_Hand_Uart.obj)

line level    source

   1          #include "MCU_Hand_Uart.h"
   2          
   3          //数据包序号
   4          unsigned char Sn = 0x00;
   5          
   6          
   7          //========================================================================
   8          // 函数: void UART_Receive_Processing()
   9          // 描述: UART1接收处理函数
  10          // 参数: 无
  11          // 返回: 无
  12          // 版本: V1.0, 2020.04.24
  13          //========================================================================
  14          void UART_Receive_Processing()
  15          {
  16   1        if(Uart_Pretreatment()){
  17   2            //OLED_P6x8Str(RX1_len*8,4, "0"); 
  18   2            SendString1(RX1_Buffer,RX1_len);
  19   2            UART_BUF_Init();
  20   2        }
  21   1      /*
  22   1          //校验接收数据的合法性
  23   1          if(Uart_Pretreatment()) {
  24   1              //无线模块连接标记位
  25   1              Wifi_flag = 0x01;
  26   1              //获取包序号并赋值给Sn
  27   1              Sn = RX1_Buffer[5];
  28   1              switch(RX1_Buffer[4]) {
  29   1              //WiFi模组获取设备信息
  30   1              case 0x01:
  31   1                  Data_Encapsulation(Device_information, sizeof(Device_information), 0x00, Sn, 0x00);
  32   1                  break;
  33   1              //WiFi模组控制设备,读取设备的当前状态
  34   1              case 0x03:
  35   1                  //WiFi模 组 控 制 设 备
  36   1                  if(RX1_Buffer[8] == 0x01) {
  37   1                      //收到数据后，mcu控制设备函数
  38   1      //                MCU_Application_Control(RX1_Buffer);
  39   1                      Data_Encapsulation(Mcu_send, 9, 0x04, Sn, 0x00);
  40   1                      //MCU主动上报当前状态
  41   1                      Sn = Sn + 0x01;
  42   1                      Data_Encapsulation(Mcu_send, 14, 0x05, Sn, 0x04);
  43   1                      MCU_OLED_StatusChange(RX1_Buffer[9]);
  44   1                  }
  45   1                  // WiFi模 组 读 取 设 备 的 当 前 状 态
  46   1                  if(RX1_Buffer[8] == 0x02) {
  47   1                      Data_Encapsulation(Mcu_send, 14, 0x04, Sn, 0x03);
  48   1                  }
  49   1                  break;
  50   1              //MCU主动上报当前状态WIFI模组回复
  51   1              case 0x06:
  52   1                  break;
  53   1              //WiFi模组向MCU发送心跳
  54   1              case 0x07:
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/25/2020 20:52:47 PAGE 2   

  55   1                  //关闭定时器，将计数器置0
  56   1                  TR0 = 0;
  57   1                  Timer0_Count = 0;
  58   1                  Data_Encapsulation(Mcu_send, 9, 0x08, Sn, 0x00);
  59   1                  //打开定时器
  60   1                  TR0 = 1;
  61   1                  break;
  62   1              //通知WIFI模组进入配置模式后接收WIFI模组回复
  63   1              case 0x0a:
  64   1                  //OLED_CLS_Local(0,2,X_WIDTH,Y_WIDTH);
  65   1                  //OLED_P6x8Str(2,2,"Enter Wifi Config!");
  66   1                  break;
  67   1              //重置WiFi模组后接收WIFI模组回复
  68   1              case 0x0c:
  69   1                  //OLED_CLS_Local(0,2,X_WIDTH,Y_WIDTH);
  70   1                  //OLED_P6x8Str(2,2,"Wifi Reset Success!");
  71   1                  break;
  72   1              //WiFi模组向MCU推送WiFi状态
  73   1              case 0x0d:
  74   1                  //将手机连接标志位，网络连接标志位初始化
  75   1                  Phone_flag = 0;
  76   1                  Net_flag = 0;
  77   1                  //展示WiFi连接信息
  78   1                  MCU_OLED_MessageShow(RX1_Buffer[4], RX1_Buffer[8], RX1_Buffer[9]);
  79   1                  if(RX1_Buffer[8] >= 0x00 && RX1_Buffer[8] <= 0x07 ) {
  80   1                      Net_flag = 1;
  81   1                  }
  82   1                  if(RX1_Buffer[8] >= 0x08 && RX1_Buffer[8] <= 0x0F ) {
  83   1                      Net_flag = 1;
  84   1                      Phone_flag = 1;
  85   1                  }
  86   1                  //展示产品连接信息
  87   1                  MCU_OLED_StatusChange(0x00);
  88   1                  Data_Encapsulation(Mcu_send, 9, 0x0e, Sn, 0x00);
  89   1                  break;
  90   1              case 0x0f:
  91   1                  Data_Encapsulation(Mcu_send, 9, 0x10, Sn, 0x00);
  92   1                  break;
  93   1              //WiFi模组非法数据包通知
  94   1              case 0x11:
  95   1                  Data_Encapsulation(Mcu_send, 10, 0x12, Sn, RX1_Buffer[8]);
  96   1                  break;
  97   1              //MCU请求WiFi进入可绑定模式，WiFi模组回复
  98   1              case 0x16:
  99   1                  break;
 100   1              //MCU请求获取网络时间，WiFi模组回复
 101   1              case 0x18:
 102   1                  break;
 103   1              case 0x2a:
 104   1                  //MCU请求WiFi重启，WiFi模组回复
 105   1                  break;
 106   1              }
 107   1              RST_Uart_Timer();
 108   1          }
 109   1      */
 110   1      }
 111          //========================================================================
 112          // 函数: void UART_Send_Processing()
 113          // 描述: UART1发送处理函数
 114          // 参数: 无
 115          // 返回: 无
 116          // 版本: V1.0, 2020.04.24
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/25/2020 20:52:47 PAGE 3   

 117          //========================================================================
 118          void UART_Send_Processing()
 119          {
 120   1      
 121   1          unsigned char flag = 0;
 122   1          //  配置WiFi模式(Soft模式)  **/
 123   1          if(Set_soft_flag == 0)      {
 124   2              Delay_ms(10);
 125   2              if(Set_soft_flag == 0)      {
 126   3                  flag = 0x01;
 127   3              }
 128   2          }
 129   1          //  配置WiFi模式(AP模式)  **/
 130   1          if(Set_AP_flag == 0)        {
 131   2              Delay_ms(10);
 132   2              if(Set_AP_flag == 0)        {
 133   3                  flag = 0x02;
 134   3              }
 135   2          }
 136   1          //  重置WiFi信息  **/
 137   1          if(Reset_message_flag == 0) {
 138   2              Delay_ms(10);
 139   2              if(Reset_message_flag == 0) {
 140   3                  flag = 0x03;
 141   3              }
 142   2          }
 143   1          //  WiFi进入可绑定模式  **/
 144   1          if(Bindable_wifi_flag == 0) {
 145   2              Delay_ms(10);
 146   2              if(Bindable_wifi_flag == 0) {
 147   3                  flag = 0x04;
 148   3              }
 149   2          }
 150   1          //   重启WiFi模组   **/
 151   1          if(Restart_wifi_flag == 0)  {
 152   2              Delay_ms(10);
 153   2              if(Restart_wifi_flag == 0)  {
 154   3                  flag = 0x05;
 155   3              }
 156   2          }
 157   1          if(flag != 0 && Wifi_flag == 1) {
 158   2              if(flag <= 0x05) {
 159   3                  OLED_CLS_Local(0, 2, X_WIDTH, Y_WIDTH);
 160   3              }
 161   2              if(Sn != 0x00) {
 162   3                  Sn = Sn + 0x01;
 163   3              }
 164   2              switch(flag) {
 165   3              //  配置WiFi模式(Soft模式)  **/
 166   3              case 0x01:
 167   3                  OLED_P6x8Str(2, 2, "Configure Wifi:Soft");
 168   3                  Data_Encapsulation(Mcu_send, 10, 0x09, Sn, 0x01);
 169   3                  break;
 170   3              //  配置WiFi模式(AP模式)  **/
 171   3              case 0x02:
 172   3                  OLED_P6x8Str(2, 2, "Configure Wifi:AP");
 173   3                  Data_Encapsulation(Mcu_send, 10, 0x09, Sn, 0x02);
 174   3                  break;
 175   3              //  重置WiFi信息  **/
 176   3              case 0x03:
 177   3                  OLED_P6x8Str(2, 2, "Reset Wifi!");
 178   3                  Data_Encapsulation(Mcu_send, 9, 0x0b, Sn, 0x00);
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     11/25/2020 20:52:47 PAGE 4   

 179   3                  break;
 180   3              //  WiFi进入可绑定模式  **/
 181   3              case 0x04:
 182   3                  OLED_P6x8Str(2, 2, "Enter bindable mode!");
 183   3                  Data_Encapsulation(Mcu_send, 9, 0x15, Sn, 0x00);
 184   3                  break;
 185   3              //   重启WiFi模组   **/
 186   3              case 0x05:
 187   3                  OLED_P6x8Str(2, 2, "Restart Wifi!");
 188   3                  Data_Encapsulation(Mcu_send, 9, 0x29, Sn, 0x00);
 189   3                  break;
 190   3              }
 191   2              while(Set_soft_flag == 0 || Set_AP_flag == 0 || Reset_message_flag == 0 || Bindable_wifi_flag == 0
             - || Restart_wifi_flag == 0);
 192   2          }
 193   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    484    ----
   CONSTANT SIZE    =     85    ----
   XDATA SIZE       =      1       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
