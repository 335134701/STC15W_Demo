C51 COMPILER V9.60.0.0   MCU_PWM                                                           03/10/2020 18:17:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_PWM
OBJECT MODULE PLACED IN .\Objects\MCU_PWM.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_PWM.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\MCU_PWM.lst) TABS(2) OBJECT(.\Objects\MCU_PWM.obj)

line level    source

   1          #include  "MCU_Config.h"
   2          
   3          //========================================================================
   4          // 函数: void PWM_SourceClk_Duty(u8 PWM_SourceClk, u16 init_duty)
   5          // 描述: 设置PWM时钟源和周期函数。
   6          // 参数: PWM_SourceClk: PWM时钟源, 0~15对应 主时钟/(PWM_SourceClk + 1), 16为选择定时器2的溢出做时钟.
   7          //                      PwmClk_1T,PwmClk_2T, ... PwmClk_16T, PwmClk_T2.
   8          //       init_duty: PWM周期长度, 1~32767.
   9          // 返回: none.
  10          // 版本: VER1.0
  11          // 日期: 2020.03.09
  12          // 备注: 
  13          //========================================================================
  14          void  PWM_SourceClk_Duty(u8 PWM_SourceClk, u16 init_duty)
  15          {
  16   1        u8  xdata *px;
  17   1      
  18   1        EAXSFR();   // 访问XFR
  19   1        px  = PWMCKS; // PWM时钟选择
  20   1        *px = PWM_SourceClk;
  21   1        px  = PWMCH;  // PWM计数器的高字节
  22   1        *px = (u8)(init_duty >> 8);
  23   1        px++;
  24   1        *px = (u8)init_duty;  // PWM计数器的低字节
  25   1        EAXRAM(); //恢复访问XRAM
  26   1      }
  27          
  28          
  29          //========================================================================
  30          // 函数: void PWMx_Configuration(u8 PWM_id, PWMx_InitDefine *PWMx)
  31          // 描述: PWM配置函数。
  32          // 参数: PWM_id: PWM通道, PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,PWM7_ID.
  33          //       *PWMx:  配置结构指针.
  34          // 返回: none.
  35          // 版本: VER1.0
  36          // 日期: 2020.03.09
  37          // 备注: 
  38          //========================================================================
  39          void  PWMx_Configuration(u8 PWM_id, PWMx_InitDefine *PWMx)
  40          {
  41   1        u8  xdata *px;
  42   1      
  43   1        EAXSFR();   //访问XFR
  44   1        px = PWM2T1H + (PWM_id << 4);
  45   1        *px = (u8)(PWMx->FirstEdge >> 8); //第一个翻转计数高字节
  46   1        px++;
  47   1        *px = (u8)PWMx->FirstEdge;      //第一个翻转计数低字节
  48   1        px++;
  49   1        *px = (u8)(PWMx->SecondEdge >> 8);  //第二个翻转计数高字节
  50   1        px++;
  51   1        *px = (u8)PWMx->SecondEdge;     //第二个翻转计数低字节
  52   1        px++;
  53   1        *px = (PWMx->PWMx_IO_Select & 0x08)         // PWM输出IO选择
  54   1            | ((PWMx->PWMx_Interrupt << 2) & 0x04)      // 中断允许
C51 COMPILER V9.60.0.0   MCU_PWM                                                           03/10/2020 18:17:18 PAGE 2   

  55   1          | ((PWMx->SecondEdge_Interrupt << 1) & 0x02)  // 第二个翻转中断允许
  56   1          | (PWMx->FirstEdge_Interrupt & 0x01);     // 第一个翻转中断允许
  57   1        PWMCR |= (1 << PWM_id); // 相应PWM通道的端口为PWM输出口，受PWM波形发生器控制
  58   1        PWMCFG = (PWMCFG & ~(1 << PWM_id)) | ((PWMx->Start_IO_Level & 1) << PWM_id);  //设置PWM输出端口的初始电平
  59   1        EAXRAM();   //恢复访问XRAM
  60   1      }
  61          
  62          //========================================================================
  63          // 函数: void PWMx_SetPwmWide(u8 PWM_id, u16 FirstEdge, u16 SecondEdge)
  64          // 描述: PWM设置脉冲宽度函数。
  65          // 参数: PWM_id: PWM通道, PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,PWM7_ID.
  66          //       FirstEdge:   第一个翻转计数.
  67          //       SecondEdge:  第一个翻转计数.
  68          // 返回: none.
  69          // 版本: VER1.0
  70          // 日期: 2020.03.09
  71          // 备注: 
  72          //========================================================================
  73          
  74          void  PWMx_SetPwmWide(u8 PWM_id, u16 FirstEdge, u16 SecondEdge)
  75          {
  76   1        u8  xdata *px;
  77   1      
  78   1        EAXSFR();   //访问XFR
  79   1        px = PWM2T1H + (PWM_id << 4);
  80   1        *px = (u8)(FirstEdge >> 8); //第一个翻转计数高字节
  81   1        px++;
  82   1        *px = (u8)FirstEdge;      //第一个翻转计数低字节
  83   1        px++;
  84   1        *px = (u8)(SecondEdge >> 8);  //第二个翻转计数高字节
  85   1        px++;
  86   1        *px = (u8)SecondEdge;     //第二个翻转计数低字节
  87   1        EAXRAM();   //恢复访问XRAM
  88   1      }
  89          
  90          
  91          
  92          //========================================================================
  93          // 函数: void PWM_config(void)
  94          // 描述: PWM配置函数。
  95          // 参数: none.
  96          // 返回: none.
  97          // 版本: VER1.0
  98          // 日期: 2020.03.09
  99          // 备注: 
 100          //========================================================================
 101          void  PWM_Config(void)
 102          {
 103   1        PWMx_InitDefine   PWMx_InitStructure;         //结构定义
 104   1        
 105   1        PWMx_InitStructure.PWMx_IO_Select       = PWM2_P37;   //PWM输出IO选择. PWM2_P37,PWM2_P27,PWM3_P21,PWM3_P45
             -,PWM4_P22,PWM4_P44,PWM5_P23,PWM5_P42,PWM6_P16,PWM6_P07,PWM7_P17,PWM7_P06
 106   1        PWMx_InitStructure.Start_IO_Level       = 0;      //设置PWM输出端口的初始电平, 0或1
 107   1        PWMx_InitStructure.PWMx_Interrupt       = DISABLE;    //中断允许,         ENABLE或DISABLE
 108   1        PWMx_InitStructure.FirstEdge_Interrupt  = DISABLE;    //第一个翻转中断允许,   ENABLE或DISABLE
 109   1        PWMx_InitStructure.SecondEdge_Interrupt = DISABLE;    //第二个翻转中断允许,   ENABLE或DISABLE
 110   1        PWMx_InitStructure.FirstEdge            = 64;     //第一个翻转计数, 1~32767
 111   1        PWMx_InitStructure.SecondEdge           = 192;      //第二个翻转计数, 1~32767
 112   1        PWMx_Configuration(PWM2_ID, &PWMx_InitStructure);   //初始化PWM,  PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,
             -PWM7_ID
 113   1        P3n_standard(1<<7);                   //IO初始化, 上电时为高阻
 114   1      
C51 COMPILER V9.60.0.0   MCU_PWM                                                           03/10/2020 18:17:18 PAGE 3   

 115   1        PWMx_InitStructure.PWMx_IO_Select       = PWM3_P21;   //PWM输出IO选择. PWM2_P37,PWM2_P27,PWM3_P21,PWM3_P45
             -,PWM4_P22,PWM4_P44,PWM5_P23,PWM5_P42,PWM6_P16,PWM6_P07,PWM7_P17,PWM7_P06
 116   1        PWMx_InitStructure.Start_IO_Level       = 0;      //设置PWM输出端口的初始电平, 0或1
 117   1        PWMx_InitStructure.PWMx_Interrupt       = DISABLE;    //中断允许,         ENABLE或DISABLE
 118   1        PWMx_InitStructure.FirstEdge_Interrupt  = DISABLE;    //第一个翻转中断允许,   ENABLE或DISABLE
 119   1        PWMx_InitStructure.SecondEdge_Interrupt = DISABLE;    //第二个翻转中断允许,   ENABLE或DISABLE
 120   1        PWMx_InitStructure.FirstEdge            = 64;     //第一个翻转计数, 1~32767
 121   1        PWMx_InitStructure.SecondEdge           = 192;      //第二个翻转计数, 1~32767
 122   1        PWMx_Configuration(PWM3_ID, &PWMx_InitStructure);   //初始化PWM,  PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,
             -PWM7_ID
 123   1        P2n_standard(1<<1);                   //IO初始化, 上电时为高阻
 124   1      
 125   1        PWMx_InitStructure.PWMx_IO_Select       = PWM4_P22;   //PWM输出IO选择. PWM2_P37,PWM2_P27,PWM3_P21,PWM3_P45
             -,PWM4_P22,PWM4_P44,PWM5_P23,PWM5_P42,PWM6_P16,PWM6_P07,PWM7_P17,PWM7_P06
 126   1        PWMx_InitStructure.Start_IO_Level       = 0;      //设置PWM输出端口的初始电平, 0或1
 127   1        PWMx_InitStructure.PWMx_Interrupt       = DISABLE;    //中断允许,         ENABLE或DISABLE
 128   1        PWMx_InitStructure.FirstEdge_Interrupt  = DISABLE;    //第一个翻转中断允许,   ENABLE或DISABLE
 129   1        PWMx_InitStructure.SecondEdge_Interrupt = DISABLE;    //第二个翻转中断允许,   ENABLE或DISABLE
 130   1        PWMx_InitStructure.FirstEdge            = 64;     //第一个翻转计数, 1~32767
 131   1        PWMx_InitStructure.SecondEdge           = 192;      //第二个翻转计数, 1~32767
 132   1        PWMx_Configuration(PWM4_ID, &PWMx_InitStructure);   //初始化PWM,  PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,
             -PWM7_ID
 133   1        P2n_standard(1<<2);                   //IO初始化, 上电时为高阻
 134   1      
 135   1        PWMx_InitStructure.PWMx_IO_Select       = PWM5_P23;   //PWM输出IO选择. PWM2_P37,PWM2_P27,PWM3_P21,PWM3_P45
             -,PWM4_P22,PWM4_P44,PWM5_P23,PWM5_P42,PWM6_P16,PWM6_P07,PWM7_P17,PWM7_P06
 136   1        PWMx_InitStructure.Start_IO_Level       = 0;      //设置PWM输出端口的初始电平, 0或1
 137   1        PWMx_InitStructure.PWMx_Interrupt       = DISABLE;    //中断允许,         ENABLE或DISABLE
 138   1        PWMx_InitStructure.FirstEdge_Interrupt  = DISABLE;    //第一个翻转中断允许,   ENABLE或DISABLE
 139   1        PWMx_InitStructure.SecondEdge_Interrupt = DISABLE;    //第二个翻转中断允许,   ENABLE或DISABLE
 140   1        PWMx_InitStructure.FirstEdge            = 64;     //第一个翻转计数, 1~32767
 141   1        PWMx_InitStructure.SecondEdge           = 192;      //第二个翻转计数, 1~32767
 142   1        PWMx_Configuration(PWM5_ID, &PWMx_InitStructure);   //初始化PWM,  PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,
             -PWM7_ID
 143   1        P2n_standard(1<<3);                   //IO初始化, 上电时为高阻
 144   1      
 145   1        PWMx_InitStructure.PWMx_IO_Select       = PWM6_P07;   //PWM输出IO选择. PWM2_P37,PWM2_P27,PWM3_P21,PWM3_P45
             -,PWM4_P22,PWM4_P44,PWM5_P23,PWM5_P42,PWM6_P16,PWM6_P07,PWM7_P17,PWM7_P06
 146   1        PWMx_InitStructure.Start_IO_Level       = 0;      //设置PWM输出端口的初始电平, 0或1
 147   1        PWMx_InitStructure.PWMx_Interrupt       = DISABLE;    //中断允许,         ENABLE或DISABLE
 148   1        PWMx_InitStructure.FirstEdge_Interrupt  = DISABLE;    //第一个翻转中断允许,   ENABLE或DISABLE
 149   1        PWMx_InitStructure.SecondEdge_Interrupt = DISABLE;    //第二个翻转中断允许,   ENABLE或DISABLE
 150   1        PWMx_InitStructure.FirstEdge            = 64;     //第一个翻转计数, 1~32767
 151   1        PWMx_InitStructure.SecondEdge           = 192;      //第二个翻转计数, 1~32767
 152   1        PWMx_Configuration(PWM6_ID, &PWMx_InitStructure);   //初始化PWM,  PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,
             -PWM7_ID
 153   1        P0n_standard(1<<7);                   //IO初始化, 上电时为高阻
 154   1      
 155   1        PWMx_InitStructure.PWMx_IO_Select       = PWM7_P06;   //PWM输出IO选择. PWM2_P37,PWM2_P27,PWM3_P21,PWM3_P45
             -,PWM4_P22,PWM4_P44,PWM5_P23,PWM5_P42,PWM6_P16,PWM6_P07,PWM7_P17,PWM7_P06
 156   1        PWMx_InitStructure.Start_IO_Level       = 0;      //设置PWM输出端口的初始电平, 0或1
 157   1        PWMx_InitStructure.PWMx_Interrupt       = ENABLE;   //中断允许,         ENABLE或DISABLE
 158   1        PWMx_InitStructure.FirstEdge_Interrupt  = ENABLE;   //第一个翻转中断允许,   ENABLE或DISABLE
 159   1        PWMx_InitStructure.SecondEdge_Interrupt = DISABLE;    //第二个翻转中断允许,   ENABLE或DISABLE
 160   1        PWMx_InitStructure.FirstEdge            = 64;     //第一个翻转计数, 1~32767
 161   1        PWMx_InitStructure.SecondEdge           = 192;      //第二个翻转计数, 1~32767
 162   1        PWMx_Configuration(PWM7_ID, &PWMx_InitStructure);   //初始化PWM,  PWM2_ID,PWM3_ID,PWM4_ID,PWM5_ID,PWM6_ID,
             -PWM7_ID
 163   1        P0n_standard(1<<6);                   //IO初始化, 上电时为高阻
 164   1      
 165   1        TH2 = (u8)((65536UL - MAIN_Fosc / 500000UL) / 256); //波特率使用Timer2
 166   1        TL2 = (u8)((65536UL - MAIN_Fosc / 500000UL) % 256);
C51 COMPILER V9.60.0.0   MCU_PWM                                                           03/10/2020 18:17:18 PAGE 4   

 167   1        AUXR = 0x14;    //Timer2 set As Timer, Timer2 set as 1T mode;
 168   1        PWM_SourceClk_Duty(PwmClk_T2, 256); //时钟源: PwmClk_1T,PwmClk_2T, ... PwmClk_16T, PwmClk_T2,   PWM周期: 
             -1~32767
 169   1        
 170   1        PWMCR |= ENPWM;   // 使能PWM波形发生器，PWM计数器开始计数
 171   1        PWMCR &= ~ECBI;   //禁止PWM计数器归零中断
 172   1      //  PWMCR |=  ECBI;   //允许PWM计数器归零中断，如果允许归零中断，则需要打开总中断标记，即EA=1;
 173   1      
 174   1      //  PWMFDCR = ENFD | FLTFLIO | FDIO;  //PWM失效中断控制,  ENFD | FLTFLIO | EFDI | FDCMP | FDIO
 175   1      }
 176          
 177          
 178          
 179          /********************* PWM中断函数************************/
 180          void PWM_int (void) interrupt PWM_VECTOR
 181          {
 182   1        if(PWMIF & CBIF)  //PWM计数器归零中断标志
 183   1        {
 184   2          PWMIF &= ~CBIF; //清除中断标志
 185   2        }
 186   1        if(PWMIF & C2IF)  //PWM2中断标志
 187   1        {
 188   2          PWMIF &= ~C2IF; //清除中断标志
 189   2        }
 190   1        if(PWMIF & C3IF)  //PWM3中断标志
 191   1        {
 192   2          PWMIF &= ~C3IF; //清除中断标志
 193   2        }
 194   1        if(PWMIF & C4IF)  //PWM4中断标志
 195   1        {
 196   2          PWMIF &= ~C4IF; //清除中断标志
 197   2        }
 198   1        if(PWMIF & C5IF)  //PWM5中断标志
 199   1        {
 200   2          PWMIF &= ~C5IF; //清除中断标志
 201   2        }
 202   1        if(PWMIF & C6IF)  //PWM6中断标志
 203   1        {
 204   2          PWMIF &= ~C6IF; //清除中断标志
 205   2        }
 206   1        if(PWMIF & C7IF)  //PWM7中断标志
 207   1        {
 208   2          PWMIF &= ~C7IF; //清除中断标志
 209   2        }
 210   1      }
 211          
 212          /********************* PWM失效中断函数************************/
 213          void PWMFD_int (void) interrupt PWMFD_VECTOR
 214          {
 215   1        if(PWMFDCR & FDIF)    //PWM异常检测中断标志位
 216   1        {
 217   2          PWMFDCR &= ~FDIF; //清除中断标志
 218   2        }
 219   1      }
 220          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    662    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MCU_PWM                                                           03/10/2020 18:17:18 PAGE 5   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
