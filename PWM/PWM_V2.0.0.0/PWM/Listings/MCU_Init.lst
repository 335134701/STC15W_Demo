C51 COMPILER V9.60.0.0   MCU_INIT                                                          03/11/2020 16:32:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_INIT
OBJECT MODULE PLACED IN .\Objects\MCU_Init.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_Init.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\MCU_Init.lst) TABS(2) OBJECT(.\Objects\MCU_Init.obj)

line level    source

   1          #include  "MCU_Config.h"
   2          
   3          //========================================================================
   4          // 函数: void MCU_Init(void)
   5          // 描述: 单片机初始化函数
   6          // 参数: 无
   7          // 返回: 无
   8          // 版本: V1.0, 2020.03.09
   9          //========================================================================
  10          void MCU_Init(void)
  11          {
  12   1          GPIO_Init();    //GPIO 初始化
  13   1          GPIO_Config();  //GPIO口设置工作模式
  14   1          Timer_Config(); //定时器初始化
  15   1      }
  16          
  17          
  18          //========================================================================
  19          // 函数: void GPIO_Init(void)
  20          // 描述: GPIO口初始化函数
  21          // 参数: 无
  22          // 返回: 无
  23          // 版本: V1.0, 2020.03.09
  24          //========================================================================
  25          //注意:   STC15W4K32S4系列的芯片,上电后所有与PWM相关的IO口均为
  26          //        高阻态,需将这些口设置为准双向口或强推挽模式方可正常使用
  27          void GPIO_Init(void)
  28          {
  29   1        //第一种方式：使用P0n_standard()函数将所有IO口设置为准双向口，默认选择第一种
  30   1        P0n_standard(0xff); //设置为准双向口
  31   1        P1n_standard(0xff); //设置为准双向口
  32   1        P2n_standard(0xff); //设置为准双向口
  33   1        P3n_standard(0xff); //设置为准双向口
  34   1        P4n_standard(0xff); //设置为准双向口
  35   1        P5n_standard(0xff); //设置为准双向口
  36   1      }
  37          
  38          //========================================================================
  39          // 函数: u8 GPIO_Inilize(u8 GPIO, GPIO_InitTypeDef *GPIOx)
  40          // 描述: 初始化IO口.
  41          // 参数: GPIOx: 结构参数,请参考timer.h里的定义.
  42          // 返回: 成功返回0, 空操作返回1,错误返回2.
  43          // 版本: V1.0, 2020.03.09
  44          //========================================================================
  45          u8  GPIO_Set(u8 GPIO, GPIO_InitTypeDef *GPIOx)
  46          {
  47   1        if(GPIO > GPIO_P5)        return 1; //空操作
  48   1        if(GPIOx->Mode > GPIO_OUT_PP) return 2; //错误
  49   1        if(GPIO == GPIO_P0)
  50   1        {
  51   2          if(GPIOx->Mode == GPIO_PullUp)    P0M1 &= ~GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //上拉准双向口
  52   2          if(GPIOx->Mode == GPIO_HighZ)   P0M1 |=  GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //浮空输入
  53   2          if(GPIOx->Mode == GPIO_OUT_OD)    P0M1 |=  GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //开漏输出
  54   2          if(GPIOx->Mode == GPIO_OUT_PP)    P0M1 &= ~GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //推挽输出
C51 COMPILER V9.60.0.0   MCU_INIT                                                          03/11/2020 16:32:00 PAGE 2   

  55   2        }
  56   1        if(GPIO == GPIO_P1)
  57   1        {
  58   2          if(GPIOx->Mode == GPIO_PullUp)    P1M1 &= ~GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //上拉准双向口
  59   2          if(GPIOx->Mode == GPIO_HighZ)   P1M1 |=  GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //浮空输入
  60   2          if(GPIOx->Mode == GPIO_OUT_OD)    P1M1 |=  GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //开漏输出
  61   2          if(GPIOx->Mode == GPIO_OUT_PP)    P1M1 &= ~GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //推挽输出
  62   2        }
  63   1        if(GPIO == GPIO_P2)
  64   1        {
  65   2          if(GPIOx->Mode == GPIO_PullUp)    P2M1 &= ~GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //上拉准双向口
  66   2          if(GPIOx->Mode == GPIO_HighZ)   P2M1 |=  GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //浮空输入
  67   2          if(GPIOx->Mode == GPIO_OUT_OD)    P2M1 |=  GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //开漏输出
  68   2          if(GPIOx->Mode == GPIO_OUT_PP)    P2M1 &= ~GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //推挽输出
  69   2        }
  70   1        if(GPIO == GPIO_P3)
  71   1        {
  72   2          if(GPIOx->Mode == GPIO_PullUp)    P3M1 &= ~GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //上拉准双向口
  73   2          if(GPIOx->Mode == GPIO_HighZ)   P3M1 |=  GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //浮空输入
  74   2          if(GPIOx->Mode == GPIO_OUT_OD)    P3M1 |=  GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //开漏输出
  75   2          if(GPIOx->Mode == GPIO_OUT_PP)    P3M1 &= ~GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //推挽输出
  76   2        }
  77   1        if(GPIO == GPIO_P4)
  78   1        {
  79   2          if(GPIOx->Mode == GPIO_PullUp)    P4M1 &= ~GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //上拉准双向口
  80   2          if(GPIOx->Mode == GPIO_HighZ)   P4M1 |=  GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //浮空输入
  81   2          if(GPIOx->Mode == GPIO_OUT_OD)    P4M1 |=  GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //开漏输出
  82   2          if(GPIOx->Mode == GPIO_OUT_PP)    P4M1 &= ~GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //推挽输出
  83   2        }
  84   1        if(GPIO == GPIO_P5)
  85   1        {
  86   2          if(GPIOx->Mode == GPIO_PullUp)    P5M1 &= ~GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //上拉准双向口
  87   2          if(GPIOx->Mode == GPIO_HighZ)   P5M1 |=  GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //浮空输入
  88   2          if(GPIOx->Mode == GPIO_OUT_OD)    P5M1 |=  GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //开漏输出
  89   2          if(GPIOx->Mode == GPIO_OUT_PP)    P5M1 &= ~GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //推挽输出
  90   2        }
  91   1        return 0; //成功
  92   1      }
  93          
  94          //========================================================================
  95          // 函数: void GPIO_Config(void)
  96          // 描述: GPIO口设置工作模式
  97          // 参数: 无
  98          // 返回: 无
  99          // 版本: V1.0, 2020.03.09
 100          //========================================================================
 101          void  GPIO_Config(void)
 102          {
 103   1        //本方法例程是设置P3^4,P3^5引脚工作模式为GPIO_OUT_PP(推挽输出)
 104   1        GPIO_InitTypeDef  GPIO_InitStructure;               //结构定义
 105   1        GPIO_InitStructure.Pin  = GPIO_Pin_5; //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
 106   1        GPIO_InitStructure.Mode = GPIO_OUT_PP;              //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,
             -GPIO_OUT_PP
 107   1        GPIO_Set(GPIO_P3,&GPIO_InitStructure);          //初始化
 108   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    549    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MCU_INIT                                                          03/11/2020 16:32:00 PAGE 3   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
