C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     12/13/2020 15:45:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_HAND_UART
OBJECT MODULE PLACED IN .\Objects\MCU_Hand_Uart.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE MCU_Hand_Uart.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\MCU_Hand_Uart.lst) TABS(2) OBJECT(.\Objects\MCU_Hand_Uart.obj)

line level    source

   1          #include "MCU_Hand_Uart.h"
   2          
   3          unsigned char ConfigWifiMode = 0x00;
   4          
   5          //========================================================================
   6          // 函数: unsigned char Uart_Prereception_Layer()
   7          // 描述: 数据接收预处理函数
   8          // 参数: 无
   9          // 返回: 无
  10          // 说明：此函数主要处理，接收字符串，并校验字符串
  11          // 版本: V1.0, 2020.03.09
  12          //========================================================================
  13          unsigned char Uart_Prereception_Layer()
  14          {
  15   1          //Check_protocol_flag表示接收数据是否有效标记位
  16   1          unsigned char Check_protocol_flag = 0;
  17   1          if(RX1_len > 0 && !B_TX1_Busy && RX1_Buffer[0] == 0xFF) {
  18   2              if(RX1_len > 2) {
  19   3                  if(RX1_Buffer[1] == 0xFF) {
  20   4                      if(RX1_len > (MinOrder + 5)) {
  21   5                          UART_BUF_Init();
  22   5                      }
  23   4                      if((RX1_Buffer[2] * 16 * 16 + RX1_Buffer[3] + 4) == RX1_len) {
  24   5                          Check_protocol_flag = Check_Protocol(RX1_Buffer, RX1_len);
  25   5                          if(!Check_protocol_flag) {
  26   6                              UART_BUF_Init();
  27   6                          }
  28   5                      }
  29   4                  } else {
  30   4                      UART_BUF_Init();
  31   4                  }
  32   3              }
  33   2          } else {
  34   2              UART_BUF_Init();
  35   2          }
  36   1          return Check_protocol_flag;
  37   1      }
  38          
  39          //========================================================================
  40          // 函数: void Uart_Transmission_Layer(unsigned int Buf_len,unsigned char order,sn,action)
  41          // 描述: 串口数据发送处理函数
  42          // 参数: Buf_len:发送数组实际长度;order:协议命令标记;action:协议action标记
  43          // 返回: 无
  44          // 说明：无
  45          // 版本: V1.0, 2020.03.09
  46          //========================================================================
  47          void Uart_Transmission_Layer(unsigned int Buf_len, unsigned char order, action)
  48          {
  49   1          unsigned char Buf[116] = {0};
  50   1          unsigned char *tmp=NULL;
  51   1          memcpy(Buf, PublicAgreement, sizeof(PublicAgreement));
  52   1          tmp=Buf+sizeof(PublicAgreement);
  53   1          Buf[3] = Buf_len - 4;
  54   1          Buf[4] = order;
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     12/13/2020 15:45:09 PAGE 2   

  55   1          Buf[5] = Sn;
  56   1          //上传设备信息
  57   1          if(order == 0x02) {
  58   2              memcpy(tmp,SerialProVersion,sizeof(SerialProVersion));
  59   2              tmp=tmp+sizeof(SerialProVersion);
  60   2              memcpy(tmp,BusinessProVersion,sizeof(BusinessProVersion));
  61   2              tmp=tmp+sizeof(BusinessProVersion);
  62   2              memcpy(tmp,HardVersion,sizeof(HardVersion));
  63   2              tmp=tmp+sizeof(HardVersion);
  64   2              memcpy(tmp,SoftVersion,sizeof(SoftVersion));
  65   2              tmp=tmp+sizeof(SoftVersion);
  66   2              memcpy(tmp,ProductKey,sizeof(ProductKey));
  67   2              tmp=tmp+sizeof(ProductKey)+2;
  68   2              memcpy(tmp,DeviceAttributes,sizeof(DeviceAttributes));
  69   2              tmp=tmp+sizeof(DeviceAttributes);
  70   2              memcpy(tmp,ProductSecert,sizeof(ProductSecert));
  71   2          }
  72   1          //接收非法数据包
  73   1          if(order == 0x12) {
  74   2              Buf[8] = action;
  75   2          }
  76   1          //上传设备状态
  77   1          if((order == 0x04 && action == 0x03) || (order == 0x05 && action == 0x04)) {
  78   2              Buf[8] = action;
  79   2              Buf[9] = P1 >> 4 & 0X0F;
  80   2              Buf[10] = 0;
  81   2              Buf[11] = 0x00;
  82   2              Buf[12] = 0x00;
  83   2          }
  84   1          //计算校验和
  85   1          Buf[Buf_len - 1] = Calculate_Checksum(Buf, Buf_len);
  86   1          //串口1回复数据
  87   1          SendString1(Buf, Buf_len);
  88   1      }
  89          
  90          //========================================================================
  91          // 函数: void IsConnect_wifi()
  92          // 描述: 判断是否接收到心跳包，如果没有接收到表示，连接wifi失败
  93          // 参数: *Buf:字符数组,Buf_len:数组实际长度
  94          // 返回: 无
  95          // 说明：无
  96          // 版本: V1.0, 2020.03.09
  97          //========================================================================
  98          void IsConnect_wifi()
  99          {
 100   1          //说明wifi模块已经连接成功，开启定时器
 101   1          if((Wifi_flag == 1) && (Timer0_Count == 0)) {
 102   2              TR0 = 1;
 103   2          }
 104   1          //超过三分钟还未收到心跳包，即单片机与wifi模块失去联系
 105   1          //定时器的时间为5ms
 106   1          if(Timer0_Count >= 36000) {
 107   2              TR0 = 0;            //定时器0 初始化关闭
 108   2              Timer0_Count = 0;   //定时器0计数位
 109   2              Wifi_flag = 0x00;   //wifi连接模块标记位初始化
 110   2              Net_flag = 0;       //网络标记位初始化
 111   2              Phone_flag = 0;     //手机连接标记位初始化
 112   2              OLED_CLS_Local(0, 2, X_WIDTH, Y_WIDTH);
 113   2              OLED_P6x8Str(36, 4, "Wifi loss!");
 114   2          }
 115   1      }
 116          
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     12/13/2020 15:45:09 PAGE 3   

 117          //========================================================================
 118          // 函数: void UART_Send_Servvice_Layer()
 119          // 描述: UART1发送业务处理函数
 120          // 参数: 无
 121          // 返回: 无
 122          // 版本: V1.0, 2020.04.24
 123          //========================================================================
 124          void UART_Send_Servvice_Layer()
 125          {
 126   1          if(Set_soft_flag == 0 || Set_AP_flag == 0 || Reset_message_flag == 0 || Bindable_wifi_flag == 0 || Res
             -tart_wifi_flag == 0) {
 127   2              Delay_ms(10);
 128   2              OLED_CLS_Local(0, 2, X_WIDTH, Y_WIDTH);
 129   2              if(Sn != 0x00) {
 130   3                  Sn = Sn + 0x01;
 131   3              }
 132   2              //  配置WiFi模式(Soft模式)
 133   2              if(Set_soft_flag == 0) {
 134   3                  ConfigWifiMode = 0x01;
 135   3                  Uart_Transmission_Layer(10, 0x09, ConfigWifiMode);
 136   3              }
 137   2              //  配置WiFi模式(AP模式)
 138   2              if(Set_AP_flag == 0)        {
 139   3                  ConfigWifiMode = 0x02;
 140   3                 Uart_Transmission_Layer(10, 0x09, ConfigWifiMode);
 141   3              }
 142   2              //  重置WiFi信息
 143   2              if(Reset_message_flag == 0) {
 144   3                 Uart_Transmission_Layer(9, 0x0b, 0x00);
 145   3              }
 146   2              //  WiFi进入可绑定模式
 147   2              if(Bindable_wifi_flag == 0) {
 148   3                 Uart_Transmission_Layer(9, 0x15, 0x00);
 149   3              }
 150   2              //   重启WiFi模组
 151   2              if(Restart_wifi_flag == 0)  {
 152   3                 Uart_Transmission_Layer(9, 0x29, 0x00);
 153   3              }
 154   2              while(Set_soft_flag == 0 || Set_AP_flag == 0 || Reset_message_flag == 0 || Bindable_wifi_flag == 0
             - || Restart_wifi_flag == 0);
 155   2          }
 156   1        
 157   1      }
 158          /*
 159          //========================================================================
 160          // 函数: void UART_Receive_Service_Layer()
 161          // 描述: UART1接收业务处理函数
 162          // 参数: 无
 163          // 返回: 无
 164          // 版本: V1.0, 2020.04.24
 165          //========================================================================
 166          void UART_Receive_Service_Layer()
 167          {
 168            
 169            //校验接收数据的合法性
 170              if(Uart_Prereception_Layer()) {
 171                  //获取包序号并赋值给Sn
 172                  Sn = RX1_Buffer[5];
 173                  switch(RX1_Buffer[4]) {
 174                  //WiFi模组获取设备信息
 175                  case 0x01:
 176                      Uart_Transmission_Layer(115, RX1_Buffer[4] + 1, 0x00);
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     12/13/2020 15:45:09 PAGE 4   

 177                      break;
 178                  //WiFi模组控制设备,读取设备的当前状态
 179                  case 0x03:
 180                      //WiFi模 组 控 制 设 备
 181                      if(RX1_Buffer[8] == 0x01) {
 182                          //收到数据后，mcu控制设备函数
 183                          MCU_Application_Control(RX1_Buffer);
 184                          Uart_Transmission_Layer(9, RX1_Buffer[4] + 1, 0x00);
 185                          //MCU主动上报当前状态
 186                          Sn = Sn + 0x01;
 187                          Uart_Transmission_Layer(14, RX1_Buffer[4] + 2, 0x04);
 188                          MCU_OLED_StatusChange(RX1_Buffer[9]);
 189                      }
 190                      // WiFi模 组 读 取 设 备 的 当 前 状 态
 191                      if(RX1_Buffer[8] == 0x02) {
 192                          Uart_Transmission_Layer(14, RX1_Buffer[4] + 1, RX1_Buffer[8] + 1);
 193                      }
 194                      break;
 195                  //MCU主动上报当前状态WIFI模组回复
 196                  case 0x06:
 197                      break;
 198                  //WiFi模组向MCU发送心跳
 199                  case 0x07:
 200                      Wifi_flag = 0x01;
 201                      //关闭定时器，将计数器置0
 202                      TR0 = 0;
 203                      Timer0_Count = 0;
 204                      Uart_Transmission_Layer(9, RX1_Buffer[4] + 1, 0x00);
 205                      //打开定时器
 206                      TR0 = 1;
 207                      break;
 208                  //通知WIFI模组进入配置模式后接收WIFI模组回复
 209                  case 0x0a:
 210                      if(ConfigWifiMode == 0x01) {
 211                          OLED_P6x8Str(2, 2, "Configure Wifi:Soft");
 212                      } else {
 213                          OLED_P6x8Str(2, 2, "Configure Wifi:AP");
 214                      }
 215                      break;
 216                  //重置WiFi模组后接收WIFI模组回复
 217                  case 0x0c:
 218                      OLED_P6x8Str(2, 2, "Reset Wifi!");
 219                      break;
 220                  //WiFi模组向MCU推送WiFi状态
 221                  case 0x0d:
 222                      //将手机连接标志位，网络连接标志位初始化
 223                      Phone_flag = 0;
 224                      Net_flag = 0;
 225                      Wifi_flag = 0x01;
 226                      //展示WiFi连接信息
 227                      MCU_WIFI_MessageShow(RX1_Buffer[4], RX1_Buffer[8], RX1_Buffer[9]);
 228                      if(RX1_Buffer[8] >= 0x00 && RX1_Buffer[8] <= 0x07 ) Net_flag = 1;
 229                      if(RX1_Buffer[8] >= 0x08 && RX1_Buffer[8] <= 0x0F ) {
 230                          Net_flag = 1;
 231                          Phone_flag = 1;
 232                      }
 233                      //如果有手机连接 展示产品连接信息
 234                      MCU_OLED_StatusChange(0x00);
 235                      Uart_Transmission_Layer(9, RX1_Buffer[4] + 1, 0x00);
 236                      break;
 237                  case 0x0f:
 238                      Uart_Transmission_Layer(9, RX1_Buffer[4] + 1, 0x00);
C51 COMPILER V9.60.0.0   MCU_HAND_UART                                                     12/13/2020 15:45:09 PAGE 5   

 239                      break;
 240                  //WiFi模组非法数据包通知
 241                  case 0x11:
 242                      Uart_Transmission_Layer(10, RX1_Buffer[4] + 1, RX1_Buffer[8]);
 243                      break;
 244                  //MCU请求WiFi进入可绑定模式，WiFi模组回复
 245                  case 0x16:
 246                      OLED_P6x8Str(2, 2, "Enter bindable mode!");
 247                      break;
 248                  //MCU请求获取网络时间，WiFi模组回复
 249                  case 0x18:
 250                      break;
 251                  //MCU请求WiFi重启，WiFi模组回复
 252                  case 0x2a:
 253                      OLED_P6x8Str(2, 2, "Restart Wifi!");
 254                      break;
 255                  }
 256                  UART_BUF_Init();
 257              }
 258              
 259          }
 260          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    871    ----
   CONSTANT SIZE    =    127    ----
   XDATA SIZE       =      1     125
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
